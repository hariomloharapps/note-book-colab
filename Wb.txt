{"cells":[{"cell_type":"markdown","source":["# New Section"],"metadata":{"id":"Ga2d9uE"}},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":9709,"status":"ok","timestamp":1713149063884,"user":{"displayName":"Hariom Lohar","userId":"05614112575282873993"},"user_tz":-330},"id":"y7mVnRDeZ72K","outputId":"1c97cf96-bc69-4c8d-99db-a81dfa822210"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting gitpython\n","  Downloading GitPython-3.1.43-py3-none-any.whl (207 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m207.3/207.3 kB\u001b[0m \u001b[31m1.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting PyGithub\n","  Downloading PyGithub-2.3.0-py3-none-any.whl (354 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m354.4/354.4 kB\u001b[0m \u001b[31m6.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: tqdm in /usr/local/lib/python3.10/dist-packages (4.66.2)\n","Collecting gitdb<5,>=4.0.1 (from gitpython)\n","  Downloading gitdb-4.0.11-py3-none-any.whl (62 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m62.7/62.7 kB\u001b[0m \u001b[31m7.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting pynacl>=1.4.0 (from PyGithub)\n","  Downloading PyNaCl-1.5.0-cp36-abi3-manylinux_2_17_x86_64.manylinux2014_x86_64.manylinux_2_24_x86_64.whl (856 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m856.7/856.7 kB\u001b[0m \u001b[31m15.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: requests>=2.14.0 in /usr/local/lib/python3.10/dist-packages (from PyGithub) (2.31.0)\n","Collecting pyjwt[crypto]>=2.4.0 (from PyGithub)\n","  Downloading PyJWT-2.8.0-py3-none-any.whl (22 kB)\n","Requirement already satisfied: typing-extensions>=4.0.0 in /usr/local/lib/python3.10/dist-packages (from PyGithub) (4.11.0)\n","Requirement already satisfied: urllib3>=1.26.0 in /usr/local/lib/python3.10/dist-packages (from PyGithub) (2.0.7)\n","Collecting Deprecated (from PyGithub)\n","  Downloading Deprecated-1.2.14-py2.py3-none-any.whl (9.6 kB)\n","Collecting smmap<6,>=3.0.1 (from gitdb<5,>=4.0.1->gitpython)\n","  Downloading smmap-5.0.1-py3-none-any.whl (24 kB)\n","Requirement already satisfied: cryptography>=3.4.0 in /usr/local/lib/python3.10/dist-packages (from pyjwt[crypto]>=2.4.0->PyGithub) (42.0.5)\n","Requirement already satisfied: cffi>=1.4.1 in /usr/local/lib/python3.10/dist-packages (from pynacl>=1.4.0->PyGithub) (1.16.0)\n","Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.10/dist-packages (from requests>=2.14.0->PyGithub) (3.3.2)\n","Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.10/dist-packages (from requests>=2.14.0->PyGithub) (3.6)\n","Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.10/dist-packages (from requests>=2.14.0->PyGithub) (2024.2.2)\n","Requirement already satisfied: wrapt<2,>=1.10 in /usr/local/lib/python3.10/dist-packages (from Deprecated->PyGithub) (1.14.1)\n","Requirement already satisfied: pycparser in /usr/local/lib/python3.10/dist-packages (from cffi>=1.4.1->pynacl>=1.4.0->PyGithub) (2.22)\n","Installing collected packages: smmap, pyjwt, Deprecated, pynacl, gitdb, gitpython, PyGithub\n","  Attempting uninstall: pyjwt\n","    Found existing installation: PyJWT 2.3.0\n","    Uninstalling PyJWT-2.3.0:\n","      Successfully uninstalled PyJWT-2.3.0\n","Successfully installed Deprecated-1.2.14 PyGithub-2.3.0 gitdb-4.0.11 gitpython-3.1.43 pyjwt-2.8.0 pynacl-1.5.0 smmap-5.0.1\n"]}],"source":["!pip install gitpython PyGithub tqdm"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":513},"id":"ssvdMWGNcWsr","executionInfo":{"status":"error","timestamp":1713153568109,"user_tz":-330,"elapsed":4487217,"user":{"displayName":"Hariom Lohar","userId":"05614112575282873993"}},"outputId":"13231f7a-0f65-4ae0-c1c6-629ece0504ec"},"outputs":[{"output_type":"stream","name":"stderr","text":["Processing repositories:  18%|█▊        | 176/1000 [1:14:45<5:49:58, 25.48s/repo] \n"]},{"output_type":"error","ename":"FileNotFoundError","evalue":"[Errno 2] No such file or directory: 'temp/archivebox/vendor/atomicwrites.py'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-a5818ef4f149>\u001b[0m in \u001b[0;36m<cell line: 66>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     76\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     77\u001b[0m     \u001b[0mdownload_repo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrepo_url\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtemp_dir\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 78\u001b[0;31m     \u001b[0mfile_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mprocess_repo\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtemp_dir\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0moutput_file\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile_count\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     80\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"{file_count} code snippets have been saved to {output_file}\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-a5818ef4f149>\u001b[0m in \u001b[0;36mprocess_repo\u001b[0;34m(repo_path, output_file, file_count)\u001b[0m\n\u001b[1;32m     26\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mendswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'.py'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     27\u001b[0m                 \u001b[0mfile_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mos\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpath\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mjoin\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mroot\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 28\u001b[0;31m                 \u001b[0mline_count\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcount_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     29\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0;36m50\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0mline_count\u001b[0m \u001b[0;34m<=\u001b[0m \u001b[0;36m100\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     30\u001b[0m                     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-2-a5818ef4f149>\u001b[0m in \u001b[0;36mcount_lines\u001b[0;34m(file_path)\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mcount_lines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m         \u001b[0;32mwith\u001b[0m \u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfile_path\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'r'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mencoding\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m'utf-8'\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     12\u001b[0m             \u001b[0mlines\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfile\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mreadlines\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     13\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mlines\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'temp/archivebox/vendor/atomicwrites.py'"]}],"source":["\n","import os\n","import csv\n","import shutil\n","from git import Repo\n","import github\n","from tqdm import tqdm\n","\n","# Function to count lines in a file\n","def count_lines(file_path):\n","    try:\n","        with open(file_path, 'r', encoding='utf-8') as file:\n","            lines = file.readlines()\n","            return len(lines)\n","    except UnicodeDecodeError:\n","        # Skip files that cannot be decoded as UTF-8\n","        return 0\n","\n","# Function to download a GitHub repository\n","def download_repo(repo_url, local_path):\n","    Repo.clone_from(repo_url, local_path)\n","\n","# Function to process a repository\n","def process_repo(repo_path, output_file, file_count):\n","    for root, dirs, files in os.walk(repo_path):\n","        for file in files:\n","            if file.endswith('.py'):\n","                file_path = os.path.join(root, file)\n","                line_count = count_lines(file_path)\n","                if 50 <= line_count <= 100:\n","                    try:\n","                        with open(file_path, 'r', encoding='utf-8') as code_file:\n","                            code = code_file.read()\n","                    except UnicodeDecodeError:\n","                        # Skip files that cannot be decoded as UTF-8\n","                        continue\n","                    with open(output_file, 'a', newline='', encoding='utf-8') as csv_file:\n","                        writer = csv.writer(csv_file)\n","                        writer.writerow([file, line_count, code])\n","                    file_count += 1\n","                    if file_count >= 100000:\n","                        return file_count\n","    return file_count\n","\n","# GitHub API client\n","g = github.Github()\n","\n","# Search for repositories\n","query = 'language:python'\n","repos = g.search_repositories(query=query)\n","\n","# Create the output CSV file\n","output_file = 'output.csv'\n","with open(output_file, 'w', newline='', encoding='utf-8') as csv_file:\n","    writer = csv.writer(csv_file)\n","    writer.writerow(['File', 'Line Count', 'Code'])\n","\n","# Temporary directory for cloning repositories\n","temp_dir = 'temp'\n","if not os.path.exists(temp_dir):\n","    os.makedirs(temp_dir)\n","\n","file_count = 0\n","total_repos = repos.totalCount  # Get the total number of repositories\n","\n","# Process repositories\n","for repo in tqdm(repos, total=total_repos, unit='repo', desc='Processing repositories'):\n","    if file_count >= 100000:\n","        break\n","\n","    repo_url = repo.clone_url\n","\n","    # Remove the contents of the temporary directory\n","    if os.path.exists(temp_dir):\n","        shutil.rmtree(temp_dir)\n","    os.makedirs(temp_dir, exist_ok=True)\n","\n","    download_repo(repo_url, temp_dir)\n","    file_count = process_repo(temp_dir, output_file, file_count)\n","\n","print(f\"{file_count} code snippets have been saved to {output_file}\")"]},{"cell_type":"markdown","source":["#By claud ai after updating"],"metadata":{"id":"QZcmlqv-aOuX"}},{"cell_type":"code","source":["import os\n","import csv\n","import shutil\n","from git import Repo\n","import github\n","from tqdm import tqdm\n","\n","# Function to count lines in a file\n","def count_lines(file_path):\n","    try:\n","        with open(file_path, 'r', encoding='utf-8') as file:\n","            lines = file.readlines()\n","        return len(lines)\n","    except UnicodeDecodeError:\n","        # Skip files that cannot be decoded as UTF-8\n","        return 0\n","    except FileNotFoundError:\n","        # Skip files that don't exist\n","        return 0\n","\n","# Function to download a GitHub repository\n","def download_repo(repo_url, local_path):\n","    try:\n","        Repo.clone_from(repo_url, local_path)\n","    except (git.GitCommandError, git.GitError) as e:\n","        print(f\"Error downloading repository: {repo_url}\")\n","        print(e)\n","        return False\n","    return True\n","\n","# Function to process a repository\n","def process_repo(repo_path, output_file):\n","    file_count = 0\n","    for root, dirs, files in os.walk(repo_path):\n","        for file in files:\n","            if file.endswith('.py'):\n","                file_path = os.path.join(root, file)\n","                if os.path.exists(file_path):  # Check if the file exists\n","                    try:\n","                        line_count = count_lines(file_path)\n","                        if 50 <= line_count <= 100:\n","                            try:\n","                                with open(file_path, 'r', encoding='utf-8') as code_file:\n","                                    code = code_file.read()\n","                            except UnicodeDecodeError:\n","                                # Skip files that cannot be decoded as UTF-8\n","                                continue\n","                            with open(output_file, 'a', newline='', encoding='utf-8') as csv_file:\n","                                writer = csv.writer(csv_file)\n","                                writer.writerow([file, line_count, code])\n","                            file_count += 1\n","                    except FileNotFoundError:\n","                        print(f\"Skipping file: {file_path} (file not found)\")\n","                else:\n","                    print(f\"Skipping file: {file_path} (file not found)\")\n","            if file_count >= 100000:\n","                break\n","    return file_count\n","\n","# GitHub API client\n","g = github.Github()\n","\n","# Search for repositories\n","query = 'language:python'\n","repos = g.search_repositories(query=query)\n","\n","# Create the output CSV file\n","output_file = 'output.csv'\n","with open(output_file, 'w', newline='', encoding='utf-8') as csv_file:\n","    writer = csv.writer(csv_file)\n","    writer.writerow(['File', 'Line Count', 'Code'])\n","\n","# Temporary directory for cloning repositories\n","temp_dir = 'temp'\n","if not os.path.exists(temp_dir):\n","    os.makedirs(temp_dir)\n","\n","total_repos = repos.totalCount  # Get the total number of repositories\n","total_file_count = 0\n","\n","# Process repositories\n","for repo in tqdm(repos, total=total_repos, unit='repo', desc='Processing repositories'):\n","    repo_url = repo.clone_url\n","\n","    # Remove the contents of the temporary directory\n","    if os.path.exists(temp_dir):\n","        shutil.rmtree(temp_dir)\n","    os.makedirs(temp_dir, exist_ok=True)\n","\n","    # Download the repository\n","    if download_repo(repo_url, temp_dir):\n","        file_count = process_repo(temp_dir, output_file)\n","        total_file_count += file_count\n","        print(f\"{file_count} code snippets from {repo.name} have been saved to {output_file}\")\n","    else:\n","        print(f\"Skipping repository: {repo_url}\")\n","\n","print(f\"Total of {total_file_count} code snippets have been saved to {output_file}\")"],"metadata":{"id":"wylZNOSEaG7i"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##Drive"],"metadata":{"id":"TImT4_RkamIN"}},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"I0LEfe2kAkWc","executionInfo":{"status":"ok","timestamp":1713155311086,"user_tz":-330,"elapsed":5082,"user":{"displayName":"Hariom Lohar","userId":"05614112575282873993"}},"outputId":"128f810c-12bd-4d96-91e6-3452552733da"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["import shutil\n","\n","# Source file path (in Colab environment)\n","source_file_path = '/content/output.csv'  # Replace 'example.txt' with your file name\n","\n","# Destination directory path in Google Drive\n","destination_directory = '/content/drive/My Drive/'\n","\n","# Copy the file from Colab to Google Drive\n","shutil.copy(source_file_path, destination_directory)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"tEQvBGR2pLzk","executionInfo":{"status":"ok","timestamp":1713155315865,"user_tz":-330,"elapsed":645,"user":{"displayName":"Hariom Lohar","userId":"05614112575282873993"}},"outputId":"e662ceef-cd5c-412a-f80d-a7102424de14"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/drive/My Drive/output.csv'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":7}]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","provenance":[]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}
